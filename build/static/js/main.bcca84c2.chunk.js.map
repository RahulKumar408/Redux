{"version":3,"sources":["state/action-creator/index.js","Components/ComponentsB.jsx","Components/ComponentsC.jsx","Components/ComponentsA.jsx","state/reducer/textReducer.js","state/reducer/index.js","state/store.js","App.js","reportWebVitals.js","index.js"],"names":["transferText","text","dispatch","type","payload","ComponentsB","useDispatch","React","createElement","className","placeholder","onChange","e","value","target","id","ComponentsC","useSelector","state","textTranfer","ComponentsA","reducer","arguments","length","undefined","action","reducers","combineReducers","textReducer","store","legacy_createStore","applyMiddleware","thunk","App","Fragment","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","Provider"],"mappings":"sLAUeA,EAVM,SAACC,GAClB,OAAM,SAACC,GACHA,EAAS,CACLC,KAAK,WACLC,QAAQH,MCCL,SAASI,IACtB,IAAMH,EAAWI,cAOjB,OACEC,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,OAAKC,UAAU,mBAAkB,IAACF,IAAAC,cAAA,UAAI,wBACpCD,IAAAC,cAAA,OAAKC,UAAU,eACbF,IAAAC,cAAA,YAAUE,YAAY,uBAAuBC,SAThC,SAACC,GACpB,IAAMC,EAAQD,EAAEE,OAAOD,MACvBX,EAASF,EAAaa,IACtBX,EAAS,CAAEC,KAAM,eAAgBC,QAASS,KAMiCE,GAAG,uBCbnE,SAASC,IACtB,IAAMH,EAAQI,YAAY,SAACC,GAAK,OAAKA,EAAMC,cAE3C,OACEZ,IAAAC,cAAA,OAAKC,UAAU,yBACbF,IAAAC,cAAA,OAAKC,UAAU,eAAc,IAACF,IAAAC,cAAA,UAAI,wBAChCD,IAAAC,cAAA,OAAKC,UAAU,QAAQI,ICNhB,SAASO,IACtB,OACEb,IAAAC,cAAA,OAAKC,UAAU,kBACXF,IAAAC,cAAA,UAAI,uBACJD,IAAAC,cAAA,UAAI,sDACJD,IAAAC,cAAA,WACCD,IAAAC,cAACH,EAAW,MACZE,IAAAC,cAACQ,EAAW,2BCFNK,EATC,WAA+C,IAA9CH,EAAKI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAC,8BAA+BG,EAAMH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACxD,MAAmB,aAAhBC,EAAOtB,KACCsB,EAAOrB,QAGPc,GCEAQ,EAJEC,YAAgB,CAC7BR,YAAaS,ICEFC,EADDC,YAAmBJ,EAAU,GAAIK,YAAgBC,MCUhDC,MAVf,WACE,OACE1B,IAAAC,cAAAD,IAAA2B,SAAA,KAGE3B,IAAAC,cAACY,EAAW,QCEHe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAA1B,EAAA,GAAA2B,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCCDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH5C,IAAAC,cAACD,IAAM6C,WAAU,KACd7C,IAAAC,cAAC6C,IAAQ,CAACxB,MAASA,GAChBtB,IAAAC,cAACyB,EAAG,SASZE","file":"static/js/main.bcca84c2.chunk.js","sourcesContent":["const transferText = (text)=>{\r\n    return(dispatch)=>{\r\n        dispatch({\r\n            type:'transfer',\r\n            payload:text\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default transferText;","import React from 'react'\r\nimport '../index.css'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport transferText from '../state/action-creator';\r\nexport default function ComponentsB() {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = (e) => {\r\n    const value = e.target.value;\r\n    dispatch(transferText(value))\r\n    dispatch({ type: 'UPDATE_VALUE', payload: value });\r\n  };\r\n  return (\r\n    <div className=' B text-center'>\r\n      <div className='text-center p-1'> <h2>This is component B</h2></div>\r\n        <div className='text-center'>\r\n          <textarea placeholder=\"Leave a comment here\" onChange={handleChange} id=\"floatingTextarea\"></textarea>        \r\n          </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport '../index.css'\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport default function ComponentsC() {\r\n  const value = useSelector((state) => state.textTranfer);\r\n\r\n  return (\r\n    <div className=' B text-center mt p-1'>\r\n      <div className='text-center'> <h2>This is component B</h2></div>\r\n        <div className='comC'>{value}</div>\r\n     </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport ComponentsB from \"./ComponentsB\";\r\nimport ComponentsC from \"./ComponentsC\";\r\nimport '../index.css'\r\nexport default function ComponentsA() {\r\n  return (\r\n    <div className=' A text-center'>\r\n        <h1>This is component A</h1>\r\n        <h1>Data Sharign from one componet to other component </h1>\r\n        <div>\r\n         <ComponentsB></ComponentsB>\r\n         <ComponentsC></ComponentsC>\r\n        </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","const reducer = (state='Write in the above text box', action)=>{\r\n    if(action.type === 'transfer'){\r\n        return action.payload;\r\n    }\r\n    else{\r\n        return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import {combineReducers} from 'redux';\r\nimport textReducer from './textReducer';\r\n\r\nconst reducers = combineReducers({\r\n    textTranfer: textReducer\r\n})\r\n\r\nexport default reducers;","import { legacy_createStore, applyMiddleware } from \"redux\";\r\n\r\nimport thunk from 'redux-thunk';\r\nimport reducers from \"./reducer\";\r\n\r\nconst store = legacy_createStore(reducers, {}, applyMiddleware(thunk));\r\nexport default store;","import React from \"react\";\nimport ComponentsA from \"./Components/ComponentsA\";\nimport { Provider } from 'react-redux';\nimport store from './state/store';\n\nfunction App() {\n  return (\n    < >\n    {/* <Provider store = {store}>\n    </Provider> */}\n      <ComponentsA />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './state/store';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n     <Provider store = {store}>\n        <App />\n    </Provider>\n    \n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}